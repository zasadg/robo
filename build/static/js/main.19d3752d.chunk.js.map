{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/Cardlist.js","Components/Scroll.js","Components/Searchbox.js","Containers/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","card","id","name","email","className","src","alt","Cardlist","Robot","CardArray","map","user","i","key","Scroll","props","style","overflowY","height","children","Searchbox","searchField","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","Robots","fetch","Response","json","users","this","filteredRobot","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.19d3752d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport '../Card.css';\r\n\r\nconst card = ({id, name, email})=>{\r\n    return (\r\n        <div className ='card bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-4 tc' >\r\n            <img src={`https://robohash.org/${id}?200x200`} alt ='ThePictures' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({\r\n    Robot\r\n}) => {\r\n    const CardArray = Robot.map((user, i) => {\r\n        return <Card key = {i} id = {Robot[i].id} name = {Robot[i].name} email = {Robot[i].email}/>\r\n    })\r\n    return ( \r\n        <div>\r\n            {CardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style ={ {overflowY: 'scroll', height: '500px'  } }>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst Searchbox = ({searchField, searchChange})=>{\r\n    return(\r\n       <div className='pa2'>\r\n            <input className='searchbox pa3 ba br3 b--green bg-light-blue ' type='search' placeholder='search robots'\r\n            onChange = {searchChange} />\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React, {Component} from 'react';\r\nimport Cardlist from '../Components/Cardlist';\r\nimport Scroll from '../Components/Scroll';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport '../Containers/App.css';\r\n\r\n\r\nclass App extends Component {\r\n    constructor () {\r\n        super ()\r\n        this.state = {\r\n            Robots: [],\r\n            searchField: ''\r\n        }\r\n        // console.log('constructor');\r\n    }\r\n\r\ncomponentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users').then(Response=> Response.json()).then(users=>this.setState({Robots: users}));\r\n    // console.log('componentDidMount');\r\n}\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchField: event.target.value});\r\n        console.log(event)\r\n    } \r\n    \r\n    render () {\r\n        const {Robots, searchField} = this.state;\r\n        const filteredRobot = Robots.filter(Robots =>{\r\n            return Robots.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        // console.log('render');\r\n        return !Robots.length ?\r\n            <h1 className='pa6 tc'>Loading...</h1>:\r\n        \r\n       (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Robo Friends</h1>\r\n                    <Searchbox searchChange ={this.onSearchChange} />\r\n                    <Scroll>\r\n                        <Cardlist Robot = {filteredRobot} />\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {Robots} from './Robot';\nimport App from './Containers/App';\n\nReactDOM.render(\n  <App /> ,document.getElementById('root')\n  )\n\nserviceWorker.register();\n"],"sourceRoot":""}