{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/Cardlist.js","Components/Searchbox.js","Components/ErrorBoundary.js","Containers/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","card","id","name","email","className","src","alt","Cardlist","Robot","CardArray","map","user","i","key","Searchbox","searchField","searchChange","type","placeholder","onChange","ErrorBoundary","props","hasError","info","this","setState","children","Component","App","onSearchChange","event","target","value","Robots","fetch","Response","json","users","filteredRobot","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2c6f1a8c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport '../Card.css';\r\n\r\nconst card = ({id, name, email})=>{\r\n    return (\r\n        <div className ='card bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-4 tc' >\r\n            <img src={`https://robohash.org/${id}?200x200`} alt ='ThePictures' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({\r\n    Robot\r\n}) => {\r\n    // if (true){\r\n    //     throw new Error('Nooooo!');\r\n    // }\r\n    const CardArray = Robot.map((user, i) => {\r\n        return <Card key = {i} id = {Robot[i].id} name = {Robot[i].name} email = {Robot[i].email}/>\r\n    })\r\n    return ( \r\n        <div>\r\n            {CardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox = ({searchField, searchChange})=>{\r\n    return(\r\n       <div className='pa2'>\r\n            <input className='searchbox pa3 ba br3 b--green bg-light-blue ' type='search' placeholder='search robots'\r\n            onChange = {searchChange} />\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError) {\r\n            return <h1>That's wrong</h1>\r\n        }\r\n        return this.props.children\r\n\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport Cardlist from '../Components/Cardlist';\r\nimport Scroll from '../Components/Scroll';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport '../Containers/App.css';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\n\r\nclass App extends Component {\r\n    constructor () {\r\n        super ()\r\n        this.state = {\r\n            Robots: [],\r\n            searchField: ''\r\n        }\r\n        // console.log('constructor');\r\n    }\r\n\r\ncomponentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users').then(Response=> Response.json()).then(users=>this.setState({Robots: users}));\r\n    // console.log('componentDidMount');\r\n}\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchField: event.target.value});\r\n        console.log(event)\r\n    } \r\n    \r\n    render () {\r\n        const {Robots, searchField} = this.state;\r\n        const filteredRobot = Robots.filter(Robots =>{\r\n            return Robots.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        // console.log('render');\r\n        return !Robots.length ?\r\n            <h1 className='pa6 tc'>Loading...</h1>:\r\n        \r\n       (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Robo Friends</h1>\r\n                    <Searchbox searchChange ={this.onSearchChange} />\r\n                    <ErrorBoundary>\r\n                        <Cardlist Robot = {filteredRobot} />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport {Robots} from './Robot';\r\nimport App from './Containers/App';\r\n\r\nReactDOM.render(\r\n  <App /> ,document.getElementById('root')\r\n  )\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}